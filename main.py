# –ö–æ–Ω–µ—á–Ω—ã–π –∫–æ–¥

import logging
import sqlite3
import requests
import xml.etree.ElementTree as ET
from datetime import datetime, timedelta
import pytz
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

TOKEN = "7539763755:AAFcu3JvOUEY7ZkpCR3K4Z1m-ScPd8bNVfI"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather

logging.basicConfig(level=logging.INFO)

tz = pytz.timezone("Asia/Almaty")
now = datetime.now(tz)

formatted = now.strftime("%d.%m.%Y %H:%M:%S")
print(formatted)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã ---
def init_db():
    print("[INIT] –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    conn = sqlite3.connect("rates.db")
    c = conn.cursor()
    c.execute(
        """
        CREATE TABLE IF NOT EXISTS rates (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            currency TEXT,
            date TEXT,
            rate REAL
        )
    """
    )
    conn.commit()
    conn.close()
    print("[INIT] –ë–∞–∑–∞ –≥–æ—Ç–æ–≤–∞.")


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∑–∞ –æ–¥–Ω—É –¥–∞—Ç—É ---
def get_rates_for_date(date: datetime):
    formatted_date = date.strftime("%d.%m.%Y")
    url = f"https://nationalbank.kz/rss/get_rates.cfm?fdate={formatted_date}"
    print(f"[HTTP] –ó–∞–ø—Ä–æ—Å –∫ {url}")
    response = requests.get(url)
    print(f"[HTTP] –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
    if response.status_code != 200:
        return None
    root = ET.fromstring(response.content)

    target = {
        "–†–û–°–°–ò–ô–°–ö–ò–ô –†–£–ë–õ–¨": "RUB",
        "–ö–ò–¢–ê–ô–°–ö–ò–ô –Æ–ê–ù–¨": "CNY",
        "–£–ó–ë–ï–ö–°–ö–ò–• –°–£–ú–û–í": "UZS",
        "–î–û–õ–õ–ê–† –°–®–ê": "USD",
    }

    result = []
    for item in root.findall("item"):
        fullname = item.find("fullname").text.upper()
        rate = float(item.find("description").text)
        if fullname in target:
            result.append((target[fullname], date.strftime("%Y-%m-%d"), rate))
    return result


# --- –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –∑–∞ 7 –¥–Ω–µ–π ---
def update_rates():
    print("[UPDATE] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∑–∞ 7 –¥–Ω–µ–π...")
    today = datetime.now(pytz.timezone("Asia/Almaty"))
    conn = sqlite3.connect("rates.db")
    c = conn.cursor()
    today = datetime.now()
    for i in range(7):
        date = today - timedelta(days=i)
        c.execute("SELECT 1 FROM rates WHERE date = ?", (date.strftime("%Y-%m-%d"),))
        if c.fetchone():
            continue
        print(f"[LOAD] –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å –∑–∞ {date.strftime('%Y-%m-%d')}")
        rates = get_rates_for_date(date)
        if rates:
            c.executemany(
                "INSERT INTO rates (currency, date, rate) VALUES (?, ?, ?)", rates
            )
    conn.commit()
    conn.close()
    print("[UPDATE] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


# --- –¢–µ–∫—Å—Ç–æ–≤—ã–π ASCII-–≥—Ä–∞—Ñ–∏–∫ ---
def build_text_chart(currency_code: str, currency_name: str):
    conn = sqlite3.connect("rates.db")
    c = conn.cursor()
    c.execute("SELECT date, rate FROM rates WHERE currency = ? ORDER BY date DESC LIMIT 7", (currency_code,))
    rows = c.fetchall()
    conn.close()

    if not rows:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞."

    rows.reverse()
    min_rate = min(rate for _, rate in rows)
    step = 0.5  # –∫–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ = 0.5 ‚Ç∏
    max_dots = 10

    text = f"üìâ –ö—É—Ä—Å {currency_name} –∑–∞ 7 –¥–Ω–µ–π:\n\n"
    for date_str, rate in rows:
        date_fmt = datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m")
        diff = rate - min_rate
        bar_len = min(int(diff / step), max_dots)
        dots = '‚Ä¢' * (bar_len or 1)
        text += f"{date_fmt} | {rate:>6.2f} ‚Ç∏ | {dots}\n"

    return text




# --- Telegram UI ---
main_keyboard = ReplyKeyboardMarkup(
    [["\U0001f4b9 –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", "\U0001f4c9 –ì—Ä–∞—Ñ–∏–∫"], ["\U0001f4b8 –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è"]],
    resize_keyboard=True,
)
graph_keyboard = ReplyKeyboardMarkup(
    [["üìâ USD", "üìâ RUB", "üìâ CNY", "üìâ UZS"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]], resize_keyboard=True
)
convert_keyboard = ReplyKeyboardMarkup(
    [["USD", "RUB", "CNY", "UZS"], ["üè† –í –º–µ–Ω—é"]], resize_keyboard=True
)

user_convert_state = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if text == "\U0001f4b9 –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç":
        user_convert_state.pop(user_id, None)
        await show_rates(update)

    elif text == "\U0001f4c9 –ì—Ä–∞—Ñ–∏–∫":
        user_convert_state[user_id] = {"mode": "graph"}
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=graph_keyboard)

    elif text.startswith("üìâ"):
        if user_convert_state.get(user_id, {}).get("mode") == "graph":
            code = text.split()[1]
            names = {
                "USD": "–¥–æ–ª–ª–∞—Ä–∞ –°–®–ê",
                "RUB": "—Ä—É–±–ª—è",
                "CNY": "—é–∞–Ω—è",
                "UZS": "—É–∑–±–µ–∫—Å–∫–æ–≥–æ —Å—É–º–∞",
            }
            name = names.get(code, code)
            await send_graph(update, code, name)
        else:
            await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ '–ì—Ä–∞—Ñ–∏–∫', —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É.")

    elif text == "üí∏ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è":
        user_convert_state[user_id] = {"step": "choose_currency", "mode": "convert"}
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:", reply_markup=convert_keyboard
        )

    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" or text == "üè† –í –º–µ–Ω—é":
        user_convert_state.pop(user_id, None)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard
        )

    elif text in ["USD", "RUB", "CNY", "UZS"]:
        if user_convert_state.get(user_id, {}).get("mode") == "convert":
            user_convert_state[user_id]["currency"] = text
            user_convert_state[user_id]["step"] = "enter_amount"
            await update.message.reply_text(
                f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {text}:", reply_markup=convert_keyboard
            )
        else:
            await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

    elif user_convert_state.get(user_id, {}).get("step") == "enter_amount":
        try:
            amount = float(text.replace(",", "."))
            from_currency = user_convert_state[user_id]["currency"]
            to_currency = "KZT"
            conn = sqlite3.connect("rates.db")
            c = conn.cursor()
            today = datetime.now().strftime("%Y-%m-%d")
            c.execute(
                "SELECT rate FROM rates WHERE currency = ? AND date = ?",
                (from_currency, today),
            )
            from_rate = c.fetchone()
            conn.close()
            if from_rate:
                result = amount * from_rate[0]
                await update.message.reply_text(
                    f"{amount} {from_currency} = {round(result, 2)} ‚Ç∏"
                )
            else:
                await update.message.reply_text("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        except:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 100")

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")


async def show_rates(update: Update):
    tz = pytz.timezone("Asia/Almaty")
    now = datetime.now()
    date = now.strftime("%d.%m.%Y %H:%M:%S")
    conn = sqlite3.connect("rates.db")
    c = conn.cursor()
    c.execute(
        "SELECT currency, rate FROM rates WHERE date = ?", (now.strftime("%Y-%m-%d"),)
    )
    rows = c.fetchall()
    conn.close()

    code_to_label = {
        "USD": "üá∫üá∏ –î–æ–ª–ª–∞—Ä –°–®–ê",
        "RUB": "üá∑üá∫ –†—É–±–ª—å",
        "CNY": "üá®üá≥ –Æ–∞–Ω—å",
        "UZS": "üá∫üáø –£–∑–±–µ–∫—Å–∫–∏–π —Å—É–º",
    }

    text = f"üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ {date}:\n\n"
    for code, rate in rows:
        label = code_to_label.get(code, code)
        text += f"{label}: {rate} ‚Ç∏\n"

    await update.message.reply_text(text)


async def send_graph(update: Update, code, name):
    chart_text = build_text_chart(code, name)
    await update.message.reply_text(chart_text)


# --- Main ---
def main():
    print("[START] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    init_db()
    update_rates()
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
    print("[READY] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")


if __name__ == "__main__":
    main()
